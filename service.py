import json
import re

text = '''
Группа 1: Настройка и калибровка
Калибровка платформы
Проверка и настройка уровня стола
Калибровка экструдера
Проверка и настройка температуры нагрева
Проверка и калибровка потока материала
Группа 2: Обслуживание и замена компонентов
Чистка экструдера
Замена сопла
Замена подающего механизма
Замена платформы
Замена ремня привода
Группа 4: Очистка и обслуживание
Очистка платформы перед печатью
Очистка сопла от остатков материала
Удаление затвердевших материалов с принтера
Смазка линейных направляющих
Группа 5: Оптимизация и улучшение качества печати
Калибровка потока воздуха охлаждения
Улучшение адгезии модели к столу
Изменение настроек заполнения (инфилла)
Изменение настроек скорости движения
Изменение настроек резки контуров
Группа 6: Ремонт и замена электронных компонентов
Замена платы управления
Замена шаговых двигателей
Замена датчиков и концевых выключателей
Ремонт или замена кабелей и разъемов
Замена блока питания
Группа 8: Техническая диагностика и отладка
Выявление и устранение засоров в экструдере
Диагностика и исправление проблем с драйверами
Решение проблем с неровным слоением печати
Диагностика и исправление проблем с подачей материала

Группа 9: Калибровка и настройка дополнительных функций
Настройка автоподачи материала
Калибровка сенсора обнаружения конца нити
Настройка автоматического выравнивания платформы
Проверка возможности печати с нескольких экструдеров
Калибровка функции паузы и возобновления печати
Группа 12: Улучшение точности и детализации печати
Калибровка шага шаговых двигателей
Настройка микрошага двигателей
Калибровка потока материала для более точной печати
Использование сглаживания модели (anti-aliasing)
Использование тонких слоев для увеличения детализации
Группа 13: Работа с печатной платой и электроникой
Замена элементов на печатной плате
Тестирование и проверка работы датчиков
Настройка параметров движения осей
'''

def text_to_json(text):
    groups = re.split(r'(?=Группа \d+:)', text.strip())[1:]  # Исправлено здесь

    result = []
    operation_id = 1  # добавляем сквозную нумерацию операций

    for group in groups:
        lines = [line.strip() for line in group.split('\n') if line.strip()]  # получаем строки каждой группы
        group_id, group_name = lines[0].split(':')[0].split()[-1], lines[0].split(':')[1].strip()  # Исправлено здесь

        # подготовим сервисные операции
        service_operations = []
        for operation_name in lines[1:]:
            if operation_name:  # проверяем, что имя операции не пустое
                service_operations.append({'id': str(operation_id), 'name': operation_name})
                operation_id += 1  # увеличиваем ID операции

        result.append({
            'id': group_id,
            'name': group_name,
            'serviceOperations': service_operations,
        })

    return json.dumps(result, ensure_ascii=False, indent=2)  # Добавили return здесь

print(text_to_json(text))